@model Collection
@using CollectionsApp.Enums;

@{
    ViewData["Title"] = "Edit";
    var categories = Enum.GetValues(typeof(Category));
    var customfieldtypes = Enum.GetValues(typeof(CustomFieldTypes));
}

<h1 >Edit Collection</h1>
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <form asp-action="Edit" class="form">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="Id" />
                <div class="form-group">
                    <label asp-for="Name" class="control-label">Name</label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group description">
                   
                    <label asp-for="Description" class="control-label">Description</label>
                    <textarea asp-for="Description" class="form-control description"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="category" class="control-label">Category</label>
                    <select asp-for="category" class="form-control" aria-required="true">
                        <option value="">Select Category</option>
                        @foreach (var categ in categories)
                        {
                            <option value=@categ>@categ</option>
                        }
                    </select>
                    <span asp-validation-for="category" class="text-danger"></span>
                </div>
                <div id="CustomFields">
                    <div class="customfield-template" style="display: none;">
                        <div class="form-group">
                            <label>Field Type</label>
                            <select class="form-control customfield-type" name="CustomFields[].customFieldType">
                                <option value="">Select Field Type</option>
                                @foreach (var fieldType in customfieldtypes)
                                {
                                    <option value="@fieldType">@fieldType</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Label</label>
                            <input type="text" class="form-control customfield-name" name="CustomFields[].Label" maxlength="100">
                        </div>
                        <div class="form-group">
                            <button type="button" class="btn btn-danger remove-custom-field-btn" style="margin-bottom:5px">Delete</button>
                        </div>

                    </div>
                </div>
                <button type="button" class="btn btn-info " id="addBtn">Add Field</button>
                <button type="submit" class="btn btn-info ">Save Changes</button>
            </form>
        </div>
    </div>

    <div>
        <a asp-action="Profile">Back to Profile</a>
    </div>

    @section Scripts {
        @{
            await Html.RenderPartialAsync("_ValidationScriptsPartial");
   }
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const addCustomFieldBtn = document.getElementById('addBtn');
                const customFieldContainer = document.getElementById('CustomFields');

                let customFieldIndex = 0;
                addCustomFieldBtn.addEventListener('click', function () {

                    const customFieldTemplate = document.querySelector('.customfield-template').cloneNode(true);


                    customFieldTemplate.querySelector('.customfield-name').setAttribute('name', `CustomFields[${customFieldIndex}].Label`);
                    customFieldTemplate.querySelector('.customfield-type').setAttribute('name', `CustomFields[${customFieldIndex}].customFieldType`);


                    customFieldIndex++;

                    customFieldTemplate.style.display = 'block';


                    customFieldContainer.appendChild(customFieldTemplate);
                });


                customFieldContainer.addEventListener('click', function (event) {
                    if (event.target && event.target.classList.contains('remove-custom-field-btn')) {

                        event.target.closest('.customfield-template').remove();
                    }
                });


                document.querySelector('form').addEventListener('submit', function () {

                    const template = document.querySelector('.custom-field-tempate');
                    if (template) {
                        template.remove();
                    }
                });
            });

        </script>
    }
