@model CollectionVM
@using CollectionsApp.Enums;
@using CollectionsApp.ViewModels

@{
    ViewData["Title"] = "Edit";
    var categories = Enum.GetValues(typeof(Category));
    var customfieldtypes = Enum.GetValues(typeof(CustomFieldTypes));
}

<h1 >Edit Collection</h1>
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <form asp-action="Edit" class="form">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                
                <div class="form-group">
                    <label asp-for="Name" class="control-label">Name</label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
                <div class="form-group description">
                   
                    <label asp-for="Description" class="control-label">Description</label>
                    <textarea asp-for="Description" class="form-control description"></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="category" class="control-label">Category</label>
                    <select asp-for="category" class="form-control" aria-required="true">
                        <option value="">Select Category</option>
                        @foreach (var categ in categories)
                        {
                            <option value=@categ>@categ</option>
                        }
                    </select>
                    <span asp-validation-for="category" class="text-danger"></span>
                </div>
                @for (var i = 0; i < Model.CustomFields.Count; i++)
                {
                    <div id="CustomFieldss-@i">
                        <div class="custom-field" style="display: inline-block; margin-right: 20px;">
                            <div class="form-group" style="display: inline-block;">
                                <label asp-for="CustomFields[i].customFieldType" class="control-label" style="color:darkcyan">Field Type</label>
                                <select asp-for="CustomFields[i].customFieldType" class="form-control" aria-required="true">
                                    @foreach (var fieldType in customfieldtypes)
                                    {
                                        <option value="@fieldType">@fieldType</option>
                                    }
                                </select>
                                <span asp-validation-for="CustomFields[i].customFieldType" class="text-danger"></span>
                            </div>
                            <div class="form-group" style="display: inline-block;">
                                <label asp-for="CustomFields[i].Label" class="control-label" style="color:darkcyan">Label</label>
                                <input asp-for="CustomFields[i].Label" class="form-control" />
                                <span asp-validation-for="CustomFields[i].Label" class="text-danger"></span>
                            </div>

                            <button type="button" class="btn btn-danger removecustom-field-btn" data-index="@i">Delete</button>

                        </div>
                    </div>
                }

                  <div id="CustomFields">
                    <div class="customfield-template" style="display: none;">
                    <div class="form-group">
                        <label>Field Type</label>
                        <select class="form-control customfield-type" name="CustomFields[].customFieldType">
                            <option value="">Select Field Type</option>
                            @foreach (var fieldType in customfieldtypes)
                            {
                                <option value="@fieldType">@fieldType</option>
                            }
                        </select>
                    </div>
                        <div class="form-group">
                            <label>Label</label>
                            <input type="text" class="form-control customfield-name" name="CustomFields[].Label" maxlength="100">
                        </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-danger remove-custom-field-btn" style="margin-bottom:5px">Delete</button>
                       </div>
                        
                    </div>
                </div>
                <button type="button" class="btn btn-info " id="addBtn">Add Field</button>
                <button type="submit" class="btn btn-info ">Create</button>
            </form>
        </div>
</div>

@section Scripts {
    <script>
        const addCustomFieldBtn = document.getElementById('addBtn');
        const customFieldContainer = document.getElementById('CustomFields');
            const customFieldContainerr = document.getElementById('CustomFieldss');
           
             let customFieldIndex = @Model.CustomFields.Count;

            const deleteCustomFieldBtns = document.querySelectorAll('.removecustom-field-btn');
           
            // Attach event listener to each delete button
            deleteCustomFieldBtns.forEach(button => {
                button.addEventListener('click', function () {
                    // Retrieve the index from the data attribute
                    const index = this.getAttribute('data-index');
                    console.log('Clicked delete button index:', index); // Debugging statement

                    // Find the corresponding container div
                    const containerDiv = document.getElementById(`CustomFieldss-${index}`);
                    console.log('Container div:', containerDiv); // Debugging statement

                    if (!containerDiv) {
                        console.error('Unable to find the custom field container');
                        return; // Exit the function if the container div is not found
                    }

                    // Hide the container div
                    containerDiv.style.display = 'none';
                });
            });


            // Attach event listener to each delete button
            deleteCustomFieldBtns.forEach(button => {
                button.addEventListener('click', function () {
                    // Retrieve the index from the data attribute
                    const index = this.getAttribute('data-index');
                    console.log('Clicked delete button index:', index); // Debugging statement

                    // Find the corresponding container div
                    const containerDiv = document.getElementById(`CustomFieldss-${index}`);
                    console.log('Container div:', containerDiv); // Debugging statement

                    if (!containerDiv) {
                        console.error('Unable to find the custom field container');
                        return; // Exit the function if the container div is not found
                    }

                    // Remove the container div
                    containerDiv.remove();
                });
            });
        addCustomFieldBtn.addEventListener('click', function () {
            const customFieldTemplate = document.querySelector('.customfield-template').cloneNode(true);
            customFieldTemplate.querySelector('.customfield-name').setAttribute('name', `CustomFields[${customFieldIndex}].Label`);
            customFieldTemplate.querySelector('.customfield-type').setAttribute('name', `CustomFields[${customFieldIndex}].customFieldType`);
            customFieldIndex++;
            customFieldTemplate.style.display = 'block';
            customFieldContainer.appendChild(customFieldTemplate);
        });

        customFieldContainer.addEventListener('click', function (event) {
            if (event.target && event.target.classList.contains('remove-custom-field-btn')) {
                event.target.closest('.customfield-template').remove();
            }
        });

        
    </script>

    }






